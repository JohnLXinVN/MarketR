import { DataSource } from 'typeorm';
import { AppDataSource } from 'src/data-source';
import { Log } from 'src/logs-feature/log.entity';
import { linksPool, localizedSeedData } from './bin-list.data';

export class LogSeeder {
  private randomItem<T>(arr: T[]): T {
    return arr[Math.floor(Math.random() * arr.length)];
  }

  public async run(dataSource: DataSource): Promise<void> {
    const { faker } = await import('@faker-js/faker');
    const logRepository = dataSource.getRepository(Log);

    const logsToCreate: Partial<Log>[] = [];

    // üñ•Ô∏è Danh s√°ch c√°c h·ªá th·ªëng c·ªë ƒë·ªãnh
    const systemNames = [
      'Windows 10 Pro',
      'Windows 11 Home',
      'Ubuntu 22.04 LTS',
      'Debian 12',
      'Fedora 39',
      'Arch Linux',
      'Kali Linux',
      'macOS Ventura',
      'macOS Sonoma',
      'FreeBSD 13',
      'CentOS 9',
      'Red Hat Enterprise Linux 9',
      'OpenSUSE Leap 15.5',
    ];

    const stealerVendors = [
      'Predator',
      'Lumma',
      'Raccoon',
      'RedLine',
      'Vidar',
      'Meta',
      'Aurora',
      'Osiris',
      'Storm',
      'Rise',
      'Remcos',
      'Warzone',
      'Mekotio',
      'NjRAT',
      'AsyncRAT',
      'Quasar',
      'Xworm',
      'NanoCore',
      'AgentTesla',
      'Snake',
      'Arkei',
      'Baldr',
      'ClipBanker',
      'EvilGrab',
      'FormBook',
      'Pony',
      'SmokeLoader',
      'Hawkeye',
      'NetWire',
      'Glupteba',
    ];

    const totalLogs = 4000;
    console.log(`üì¶ Generating ${totalLogs} logs...`);

    for (let i = 0; i < totalLogs; i++) {
      // üåç Ch·ªçn qu·ªëc gia & localized data
      const countries = Object.keys(localizedSeedData);
      const randomCountry = faker.helpers.arrayElement(countries);
      const localized =
        localizedSeedData[randomCountry] || localizedSeedData['US'];

      // üßë Ng∆∞·ªùi d√πng + ƒë·ªãa ch·ªâ
      const state = this.randomItem<string>(localized.states as string[]);
      const city = this.randomItem<string>(localized.cities as string[]);
      const zip = this.randomItem<string>(localized.zips as string[]);

      // üîó Random links
      const shuffledLinks = faker.helpers.shuffle(linksPool);
      const linkCount = faker.number.int({
        min: Math.floor(linksPool.length * 0.66),
        max: linksPool.length,
      });
      const links = shuffledLinks.slice(0, linkCount);

      // üìß Email
      const firstName = faker.person.firstName().toLowerCase();
      const lastName = faker.person.lastName().toLowerCase();
      const birthYear = faker.number.int({ min: 1960, max: 2005 });
      const providers = [
        'gmail.com',
        'outlook.com',
        'yahoo.com',
        'icloud.com',
        'hotmail.com',
      ];
      const email = `${firstName}.${lastName}${birthYear}@${faker.helpers.arrayElement(providers)}`;

      // üìÅ Struct, size, price
      const struct = 'archive.zip';
      const size = faker.number.int({ min: 5000, max: 25000 });
      const price = parseFloat(
        faker.number.float({ min: 25, max: 250, fractionDigits: 2 }).toFixed(2),
      );

      // üìÖ createdAt
      const createdAt = faker.date.between({
        from: faker.date.past({ years: 2 }),
        to: new Date(),
      });

      const isp = faker.company.name();

      const log: Partial<Log> = {
        stealer: faker.helpers.arrayElement(stealerVendors),
        vendor: faker.helpers.arrayElement(stealerVendors),
        system_name: faker.helpers.arrayElement(systemNames),
        country: randomCountry,
        state,
        city,
        zip,
        isp,
        hasOutlook: Math.random() < 0.5,
        links,
        emails: [email],
        struct,
        size,
        price,
        createdAt,
        isAvailable: true,
      };

      logsToCreate.push(log);
    }

    console.log('‚è´ Inserting logs into DB...');
    for (let i = 0; i < logsToCreate.length; i += 500) {
      await logRepository.insert(logsToCreate.slice(i, i + 500));
      console.log(
        `  ‚Ä¢ Inserted ${i + 500 > logsToCreate.length ? logsToCreate.length : i + 500}/${logsToCreate.length}`,
      );
    }

    console.log('üéâ Log seeding completed successfully.');
  }
}

// üèÅ T·ª± ƒë·ªông ch·∫°y Seeder n·∫øu g·ªçi tr·ª±c ti·∫øp
